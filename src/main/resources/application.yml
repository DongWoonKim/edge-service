server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    io.github.resilience4j: DEBUG

spring:
#  session:
#    store-type: redis  # 또는 jdbc, mongo 등
#    redis:
#      namespace: polar:edge
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
#  data:
#    redis:
##      host: ${SPRING_REDIS_HOST:localhost}
#      host: polar-redis
#      port: 6379
#      connect-timeout: 2s
#      timeout: 10s             # Redis와의 일반적인 작업의 시간 제한
#      ssl:
#        enabled: false
  cloud:
    gateway:
      default-filters:
        - SaveSession
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter:
#              replenishRate: 10
#              burstCapacity: 20
#              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      httpclient:
        connect-timeout: 5000 # 2s
        response-timeout: 10s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      routes:
        - id: favicon
          predicates:
            - Path=/favicon.ico
          filters:
            - SetStatus=404
          uri: no://op
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001/books}
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002/orders}
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
        - id: root-redirect
          uri: ${WEB_FRONT_SERVICE_URL:http://localhost:8887}
          predicates:
            - Path=/
          filters:
            - RedirectTo=302,/webs
        - id: web-front-route
          uri: ${WEB_FRONT_SERVICE_URL:http://localhost:8887}
          predicates:
            - Path=/webs/**, /login, /join, /refresh-token, /access-denied, /css/**, /js/**
          filters:
            - name: CircuitBreaker
              args:
                name: webCircuitBreaker
        - id: auth-route
          uri: ${AUTH_SERVICE_URL:http://localhost:8886}
          predicates:
            - Path=/auths/**
          filters:
            - name: CircuitBreaker
              args:
                name: authCircuitBreaker
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        timeout-duration: 5s

management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

polar:
  auth-service-uri: ${AUTH_SERVICE_URL:http://localhost:8886}
